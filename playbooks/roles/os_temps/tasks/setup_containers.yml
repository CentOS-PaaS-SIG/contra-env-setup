---
# create/update and add security for containers

- name: "Set the container_config_name to OpenShift s2i templates"
  set_fact:
    container_config_name: "OpenShift s2i templates"

# Use the repo's OpenShift s2i templates as the list to process
- name: "Get OpenShift s2i template names from {{ os_template_path }}"
  find:
    paths: "{{ os_template_path }}"
    patterns: '*.yml,*.yaml'
    contains: 'kind:\s*[\"\'']?Template[\"\'']?'
    recurse: yes
  register: os_templates

- debug:
    msg: "{{ item.path }}"
  with_items: "{{ os_templates.files }}"

- name: "Process the templates"
  template:
    src: "{{ item.path }}"
    dest: "{{ item.path }}.processed"
  with_items: "{{ os_templates.files }}"

# Check that templates are valid
- name: "Check that templates are valid"
  shell: "{{ oc_bin }} process -f {{ item.path }}.processed"
  with_items: "{{ os_templates.files }}"

# Set the total build success
- set_fact:
    total_build_success: false

# Check for failed apps and cleanup
- name: "Check for all failed apps on the cluster"
  shell: "{{ oc_bin }} get all | egrep 'Failed|Error' | egrep 'builds\\/' | awk '{print $1}' | awk -F'/' '{print $2}' | sed 's/-[0-9+]//g' "
  register: oc_check_app_status
  ignore_errors: yes

- name: "Cleanup all failed dc, bc, routes, svc, and imagestreams on the cluster"
  shell: "{{ oc_bin }} get all | grep '{{ failed_container_name }}' | awk '{print $1}' | egrep -v 'builds\\/|po\\/' | xargs -i {{ oc_bin }} delete {}"
  with_items: "{{ oc_check_app_status.stdout_lines }}"
  loop_control:
    loop_var: failed_container_name
  ignore_errors: yes
  when: oc_check_app_status.stdout != ""

- name: "Cleanup any serviceaccounts, pvc, and rolebindings for an app if it exists on the cluster"
  shell: "{{ oc_bin }} get {{ item }} | egrep '{{ oc_check_app_status.stdout_lines|join('|') }}' | awk '{print $1}' | xargs -i {{ oc_bin }} delete {{ item }}/{}"
  ignore_errors: yes
  with_items:
    - serviceaccounts
    - pvc
    - rolebindings
  when: oc_check_app_status.stdout != ""

# Setup project_repo templates and store variables for each template
- name: "Setup project_repo templates and store variables for each template"
  include_tasks: "setup_os_templates.yml template_name={{ item.path }}.processed"
  with_items: "{{ os_templates.files }}"
  when: os_templates.files != ""

# Handle loading of project_repo templates into OpenShift, retry 4 times
- name: "Handle loading of project_repo templates into OpenShift"
  include_tasks: "handle_os_templates.yml"
  with_sequence: count=4
  loop_control:
    loop_var: attempt_number
  when: os_templates.files != ""

# If there were failed builds, output the error message with log directory location
- name: "If there were failed builds, direct user to log directory"
  debug:
    msg: "Some of the builds failed, check failed build logs in /tmp/contra-env-setup/logs/run-{{ run_time }}"
  when: (total_build_success|bool == false)
