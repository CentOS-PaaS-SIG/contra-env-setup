---
# tasks file for os_temps

# Set run time to be used for logging
- set_fact:
    run_time: "{{ ansible_date_time.iso8601_basic_short }}"

# Create directory for this run
- name: "Create log directory"
  file: path="/tmp/contra-env-setup/logs/run-{{ run_time }}" state=directory

# Check if the minishift cluster is started if not then start the cluster
- name: "Startup the minishift cluster"
  import_tasks: start_mcluster.yml
  when: (setup_minishift|bool == true or start_minishift|bool == true)

# Import_tasks install_oc_bin
- name: "Get OpenShift client binary(oc) version {{ oc_version }} to {{ contra_env_setup_dir }}"
  import_tasks: install_oc_bin.yml
  when: setup_minishift|bool == false

# Get ip of the cluster unless it was provided
- name: "Get the cluster Server URL for project {{ openshift_project }}"
  shell: "{{ oc_bin }} status | grep 'https' | awk '{print $NF}' | head -1"
  register: cluster_ip_register
  when: openshift_cluster_ip == ""

- set_fact:
    cluster_ip: "{{ openshift_cluster_ip }}"
  when: openshift_cluster_ip != ""

- set_fact:
    cluster_ip: "{{ cluster_ip_register.stdout }}"
  when: openshift_cluster_ip == ""

# Login to the cluster for the profile in use
- import_tasks: login_to_cluster.yml

# Create project
- name: "Create project {{ openshift_project }}"
  import_tasks: get_set_project.yml

# Import_tasks jq for querying container config files
- name: "Install jq for querying container config files"
  import_tasks: "{{ playbook_dir }}/roles/prereqs/tasks/install_virtual_reqs.yml"
  when: setup_minishift|bool == true

# Setup project_repo containers
- include_tasks: "setup_containers.yml os_template_path={{ project_dir }}/{{ os_template_dir }}"
  when: setup_containers|bool == true

# Setup sample_project_repo helper containers
- include_tasks: "setup_containers.yml os_template_path={{ helper_project_dir }}/{{ helper_os_template_dir }}/helper PARAMS={{ SAMPLE_HELPER_PARAMS }}"
  when: (setup_containers|bool == true and project_repo != sample_project_repo and setup_helper_containers|bool == true)

# Check if Jenkins is running
- name: "Check to see if a Jenkins Master instance is running"
  shell: "{{ oc_bin }} get pods | grep -i 'running' | grep -i 'jenkins' | tail -1 |  awk '{print $1}'"
  register: jenkins_running
  ignore_errors: yes

# Setup sample_project_repo Jenkins master/slave sample containers
- include_tasks: "setup_containers.yml os_template_path={{ sample_project_dir }}/{{ sample_os_template_dir }}/jenkins PARAMS={{ SAMPLE_JENKINS_PARAMS }}"
  when: (setup_containers|bool == true and project_repo != sample_project_repo and setup_sample_project|bool == true and jenkins_running.stdout == "")

# Setup sample_project_repo sample containers
- include_tasks: "setup_containers.yml os_template_path={{ sample_project_dir }}/{{ sample_os_template_dir }}/samples PARAMS={{ SAMPLE_PARAMS }}"
  when: (setup_containers|bool == true and project_repo != sample_project_repo and setup_sample_project|bool == true)

# Add security context constraints
- import_tasks: add_scc.yml
  when: modify_scc|bool == true